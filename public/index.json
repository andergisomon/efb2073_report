[{"content":"Team members We are second year third semester Electrical and Electronics Engineering students in Universiti Teknologi PETRONAS. Currently undergoing Microprocessors \u0026amp; Computer Architecture (EFB2073).\nVolintine Ander Zechariah Hwong Eddry Haqimy 21001524 21001586 21001460 Aziz Abdul Bagas Kensley Kudang Kennedy 21000360 21001068 Task allocation Software Implementatiion:\nVolintine Ander: ESP-NOW research \u0026amp; data logger coding Zechariah Hwong: Transmitter coding Eddry Haqimy: Receiver coding Web-based Report:\nAziz Abdul Bagas Kensley Kudang Kennedy ","permalink":"http://localhost:1313/posts/about_us/","summary":"More information on each team member","title":"About the Team"},{"content":"Project Background Our project makes use of ESP-NOW, a wireless communication protocol developed by Espressif for short packet transmission. This versatile protocol enables multiple devices to talk to each other via Wi-Fi with ESP-NOW protocol.\nIn many industrial, commercial, and residential applications, traditional wired communications are still widely used for controlling various systems and devices, mostly to turn ON/OFF certain devices. Our system replaces clunky wires in exchange for modular wireless switches.\nProblem Statement Wired systems quickly become inconvenient when many devices need to be controlled. This scalability issue can be solved using a wireless control system, which we implemented using ESP NOW.\nObjectives To update currently wired switches by wireless switches To enable users to control their devices from multiple location through wireless transmission To use local transmission for private IoT applications/environment Tech stack A brief description of the technologies we used throughout the project.\nNO PART of the Arduino framework was used. Hardware Seeed XIAO ESP32C3 boards (x2) STM32 board (x1) LEDs Switches Light Dependent Resistor Software frameworks For embedded programming\nESP IoT Development Framework (ESP IDF) ARM mBED Powershell (for data logging) Visual Studio Code + ESP IDF extension IDF Frontend For web report\nHugo GitHub Pages Programming languages\nC (everything else) JavaScript (website report) ","permalink":"http://localhost:1313/posts/intro/","summary":"Project Background, Problem Statement, Objectives","title":"Introduction"},{"content":"Hardware selection Materials used in this project:\nESP32C3 LEDs Buzzer Note: LEDs and Buzzer are just for demonstration purposes, as we want to demonstrate how our module works, the LEDs and Buzzer may be replaced by any other industrial device or appliance.\nFeatures ESP32C ESP 8266 STM32 with Wi-Fi Module ESP-NOW Protocol Support Native support No native support Typically unsupported Power Efficiency High, supports deep sleep modes Moderate, less efficient Varies, generally less efficient Performance and Features High, RISC-V architecture Moderate, Tensilica Xtensa Varies, depends on configuration Development Ecosystem and Community Support Extensive, strong community Good, less advanced Strong for STM32, complex configuration Cost and Availability Cost-effective Cheaper, fewer features More expensive, complex integration For this project we have chosen to work with the ESP32C3. In summary, the ESP32C3 is better suited for wireless switch module due to its native support for the ESP-NOW protocol, improved power efficiency, better performance, and more robust development ecosystem compared to the ESP8266 and STM32 with a Wi-Fi module, and we already had an ESP32C3 boards in our possessions.\nHardware design Transmitter Receiver The ESP-NOW protocol requires that two ESP32C3, one to act as a transmitter and another as a receiver. To support the wireless module the ESP32C3 was also connected to an antennae extension. The transmitter is wired to accept input from 3 switches, each button when pressed would toggle the associated pins on the receiver sides. The receiver is wired to 3 LEDs and when data is received from the transmitter, it would toggle the associated pins either from (HIGH to LOW) or (LOW to HIGH). The 3 LEDS, are just to indicate switching.\n","permalink":"http://localhost:1313/posts/hardware/","summary":"Hardware selection, Harware design","title":"Hardware Development Process"},{"content":"Flowchart Receiver Transmitter Discussion Technical challenges faced 1. Development Environment\nThe biggest difficulty that we encountered while developing the module was utilizing ESP-IDF. The process includes setting it up which requires manual installation of dependencies such as Git. The framework is also strict in choosing specific versions as its components, which may induce build errors and compatibility issues caused by version conflicts.\n2. Framework Maturity\nDespite being powerful and full of features to be explored, the ESP-IDF is more niche compared to the popular and widely used Arduino framework. ESP-IDF also has a steeper learning curve as it is highly complex and has a lower level of APIs. Having a deep understanding of its hardware and software architecture became a huge obstacle to configure the module.\n3. Limited Community Support\nThe ESP-IDF community is smaller when compared to the Arduino community. There are less examples, tutorials, and forums available to allow studying and troubleshooting specific problems encountered. The repository of examples and libraries for ESP-IDF was also too little to be used as a learning tool on utilizing the framework. This made searching for relevant code or reference implementations difficult.\nOvercoming the challenges ","permalink":"http://localhost:1313/posts/development_process/","summary":"Further discussion, technical challenges, and how we had overcome them","title":"Software development process"},{"content":"End product There are no words that best describe our promising project, so let us demonstrate our end product in action in the following video:\n(Youtube video here)\nApplications The Module serves as a very flexible attachment to any control systems that require switching. A receiver and transmitter are only required to establish the Intranet system. An example of application of the module would be in a relay circuit as the switch relay as shown below. The receiver would interact with the switch to enable the power of any high-powered system without being connected to the board and potentially frying it.\nOur Multipurpose IoT Automation with RISC-V project can be implemented in endless scenarios, examples of application in the industry for this relay circuit would be::\nPublic Transport - Sexual harassment alarm, vehicle access, etc. Home Automation - Light control, security systems, etc. Industrial Application - Machine control, process monitoring, etc. Health Care - Patient room control, emergency systems, etc. Agriculture - Irrigation control, greenhouse automation, etc. Conclusion Our module is a proof-of-concept implementation of cloudless IoT technology. This paves the road towards Intranet of Things as opposed to Internet of Things. Our system operates independently of third-party vendors (such as AWS, Azure, Clouflare, etc.), ensuring complete vendor independence. The benefits of this approach make it an attractive option for organizations looking for secure IoT solutions, unlike the mainstream approach.\nThe primary advantage of our approach is full data sovereignty, allowing users to maintain full control over information and access.\nOur module is fully air-gapped, as no data is exchanged with external servers. This decreases the attack surface for malicious parties to exploit.\nBusinesses can achieve a higher degree of security and privacy while retaining complete ownership of their data.\nRecommendations ","permalink":"http://localhost:1313/posts/results/","summary":"See our end product in action, conclusion, and future recommendations","title":"Project Outomes \u0026 Accomplishments"},{"content":" Some C code for your viewing pleasure.\n1 2 3 4 5 6 7 8 9 #include \u0026#34;freertos.h\u0026#34; #include \u0026lt;drivers/gpio.h\u0026gt; // I\u0026#39;m a comment. Everyone ignores me. I\u0026#39;m lonely. That makes me sad. extern void init_gpio(); void app_main() { init_gpio(); } ","permalink":"http://localhost:1313/posts/source_code/","summary":"View our code in detail","title":"Source code"}]